<!doctype html>
<!-- based heavily on https://gist.github.com/benjchristensen/2579599 -->
<html>
	<head>
		<title>BFA</title>
		<meta charset="utf-8"/>
		<script src="d3/d3.min.js"></script>
		<style>
			/* tell the SVG path to be a thin blue line without any area fill */
            #bluen
            {
                display: inline-block; 
                margin-top: 0.5em; 
                margin-bottom: 0.5em;
                margin-left: auto;
                margin-right: auto;
                border-style: inset;
                border-width: 1px;
                border-color: steelblue;
                width: 50px;

            } 
            #redn
            { 
                display: inline-block;
                margin-top: 0.5em;
                margin-bottom: 0.5em;
                margin-left: auto;
                margin-right: auto;
                border-style: inset;
                border-width: 1px;
                border-color: red;
                width: 50px;
            }
			path {
				stroke: steelblue;
				stroke-width: 2;
				fill: none;
			}
            div.tooltip {	
                position: absolute;			
                text-align: center;			
                width: 90px;					
                height: 28px;					
                padding: 2px;				
                font: 12px sans-serif;		
                background: lightsteelblue;	
                border: 0px;		
                border-radius: 8px;			
                pointer-events: none;			
            }

			
			.axis {
			  shape-rendering: crispEdges;
			}

			.x.axis line {
			  stroke: lightgrey;
			}

			.x.axis .minor {
			  stroke-opacity: .5;
			}

			.x.axis path {
			  display: none;
			}
			.x.axis path1 {
			  display: none;
			}
			.y.axis line, .y.axis path,.y.axis path1 {
			  fill: none;
			  stroke: #000;
			}
		</style>
        <script>
            flag = false;
var data = {"Error loading bfa.json": {BFD: [], CS: []}}

function load() {
  d3.json("bfa.json", function(error, json) {
    data = json
    mainpart()
  })
}
        function mainpart(){
		// define dimensions of graph
		var  m = [80, 80, 80, 80]; // margins
		 var w = 1000 - m[1] - m[3]; // width
		 var h = 400 - m[0] - m[2]; // height
		
x = d3.scale.linear().domain([0,255]).range([0, w]);
y = d3.scale.linear().domain([0, 1]).range([h, 0]);

// create a line function that can convert data[] into x and y points
var line = d3.svg.line()
// assign the X function to plot our line as we wish
.x(function(d,i) { 
				console.log('Plotting X value for data point: ' + d + ' using index: ' + i + ' to be at: ' + x(i) + ' using our xScale.');
				// return the X coordinate where we want to plot this datapoint
				return x(i); 
			})
.y(function(d) { 
				// verbose logging to show what's actually being done
				console.log('Plotting Y value for data point: ' + d + ' to be at: ' + y(d) + " using our yScale.");
				// return the Y coordinate where we want to plot this datapoint
				return y(d); 
			})


			// Add an SVG element with the desired dimensions and margin.
var graph = d3.select("#graph").append("svg:svg")
			      .attr("width", w + m[1] + m[3])
			      .attr("height", h + m[0] + m[2])
			      .append("svg:g")
			      .attr("transform", "translate(" + m[3] + "," + m[0] + ")");
// Define the div for the tooltip
var div = d3.select("body").append("div")	
    .attr("class", "tooltip")				
    .style("opacity", 0);


			// create yAxis
var xAxis = d3.svg.axis().scale(x).tickSize(-h).tickSubdivide(true);
			// Add the x-axis.
			graph.append("svg:g")
			      .attr("class", "x axis")
			      .attr("transform", "translate(0," + h + ")")
			      .call(xAxis);


			// create left yAxis
var yAxisLeft = d3.svg.axis().scale(y).ticks(4).orient("left");
			// Add the y-axis to the left
			graph.append("svg:g")
			      .attr("class", "y axis")
			      .attr("transform", "translate(-25,0)")
			      .call(yAxisLeft)
            
  		    function select(){  	
            var k = document.getElementById("choose").value;
            graph.append("svg:path").attr("d", line(data[k].CS))
                 .style("stroke","red")
                 .on("mouseover",csmove)
                 .on("mousemove",csmove)
                 .on("mouseout", function() {		
                                div.transition()		
                                .duration(500)		
                                .style("opacity", 0);	});
            graph.append("svg:path").attr("d", line(data[k].BFD))
                 .on("mouseover",mmove)
                 .on("mousemove",mmove)
                 .on("mouseout", function() {		
                                div.transition()		
                                .duration(500)		
                                .style("opacity", 0);	});
            }
            function csmove(){
                 var x0 = x.invert(d3.mouse(this)[0]);
                 var i = Math.ceil(x0);
                 var da = data[document.getElementById("choose").value].CS[i] ;  
                 var dat = da.toFixed(2);  
                 //alert(dat);
                 div.transition()		
                .duration(200)		
                .style("opacity", .9);		
                 div	.html( "Byte No: " + i+ "<br/>"  + "Correlation Strength: "+dat)
                .style("left", (d3.event.pageX) + "px")		
                .style("top", (d3.event.pageY - 28) + "px")
                .style("width","160px")
                .style("background","pink");
            }
            function mmove(){

                 var x0 = x.invert(d3.mouse(this)[0]);
                 var i = Math.ceil(x0);
                 var da = data[document.getElementById("choose").value].BFD[i] ; 
                 var dat = da.toFixed(2);   
                 //alert(dat);
            div.transition()		
                .duration(200)		
                .style("opacity", .9);		
            div	.html( "Byte No: " + i+ "<br/>"  + "Frequency: "+dat)
                .style("left", (d3.event.pageX) + "px")		
                .style("top", (d3.event.pageY - 28) + "px")
                .style("width","100px")
                .style("background","lightsteelblue");               
            }
            
            if(flag == false){
            d3.select("#choose")
            .selectAll("option")
            .data(Object.keys(data).sort())
            .enter().append("option")
            .text(function(d) { return d })
            flag = true;
            }
            select()
            }

            function replace(){
                //alert("You selected " + document.getElementById("choose").value);
                d3.select("#graph").text("");
                graph.replaceAll(mainpart());              
            }

	</script>

	</head>
	<body onload="load();">
    <table id = 'tb'>
    <tr>
    <div style="margin-top: 0px;text-align : center">
      <select id="choose" onchange="replace()"></select>
    </div>
    </tr>
    <tr>
    <td id="graph" class="aGraph" style="">
    </td>
    <td>
        <div><hr id = "bluen" >: Byte Frequency Distribution</div>
        <div><hr id = "redn"  >: Correlation Strength</div>
    </td>
    </tr>
    </table>
        
	</body>
</html>
